/*****VARIABLES
Customize these as needed*****/

@spacer: 10px; //Spacing between elements
@max: 1600px;
@medium: 1000px;
@small: 600px;

/**GRIDS**/

.teeny-g {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  max-width: @max;
  margin: 0px auto;
  .row {
    box-sizing: border-box;
    width: 100%;
    display: flex;
    margin: 0px auto;
    justify-content: space-around;
    flex-wrap: wrap;
  }
  .row-header {
    width: 100%;
    min-width: 100%;
    max-width: 100%;
  }
  .col {
    box-sizing: border-box;
    flex: 1 1 auto;
    margin: 0px @spacer;
    min-width: 0px;
    min-height: 0px;
  }
  .generate-columns(10);
  .generate-columns(@n, @i: 1) when (@i =< @n) {
    @j: (@i*10);
    .col-@{j}
    {
      width: calc((@i * 100% / @n) ~"-" (@spacer*2));
      max-width: calc((@i * 100% / @n) ~"-" (@spacer*2));
      min-width: calc((@i * 100% / @n) ~"-" (@spacer*2));
    }
    .generate-columns(@n, (@i + 1));
  }
  .row-left {
    justify-content: flex-start;
  }
  .row-center {
    justify-content: center;
  }
  .row-right {
    justify-content: flex-end;
  }
}

@media all and (max-width: @medium) {
  .teeny-g {
    .row {
      .generate-columns-m(10);
      .generate-columns-m(@n, @i: 1) when (@i =< @n) {
        @j: (@i*10);
        .col-m-@{j}
        {
          width: calc((@i * 100% / @n) ~"-" (@spacer*2));
          max-width: calc((@i * 100% / @n) ~"-" (@spacer*2));
          min-width: calc((@i * 100% / @n) ~"-" (@spacer*2));
        }
        .generate-columns-m(@n, (@i + 1));
      }
    }
  }
}

@media all and (max-width: @small) {
  .teeny-g {
    .row {
      .generate-columns-s(10);
      .generate-columns-s(@n, @i: 1) when (@i =< @n) {
        @j: (@i*10);
        .col-sm-@{j}
        {
          width: calc((@i * 100% / @n) ~"-" (@spacer*2));
          max-width: calc((@i * 100% / @n) ~"-" (@spacer*2));
          min-width: calc((@i * 100% / @n) ~"-" (@spacer*2));
        }
        .generate-columns-s(@n, (@i + 1));
      }
    }
  }
}
